import Mathlib.CategoryTheory.Category.Basic
import Mathlib.CategoryTheory.Types
import Mathlib.CategoryTheory.Opposites
import Mathlib.CategoryTheory.Monoidal.Cartesian.Basic
import Mathlib.CategoryTheory.Monoidal.Cartesian.Cat
import Mathlib.CategoryTheory.Monoidal.Cartesian.FunctorCategory
import Mathlib.CategoryTheory.Monoidal.Types.Basic
import Mathlib.CategoryTheory.Functor.Category
import Mathlib.CategoryTheory.Sites.Sieves
import Mathlib.CategoryTheory.Whiskering
import Mathlib.Order.Hom.CompleteLattice
import ModelTheoryTopos.Misc
import ModelTheoryTopos.Category.CartesianMonoidalCategory
import ModelTheoryTopos.Category.NatIso
import ModelTheoryTopos.Category.Presheaf.Defs
import ModelTheoryTopos.Category.Presheaf.CartesianMonoidalCategory


open CategoryTheory MonoidalCategory CartesianMonoidalCategory

namespace Sieve

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] (F : C ‚•§ D)
variable {X Y Z : C} (f : Y ‚ü∂ X)

@[simp]
def entails (S R : Sieve X) : Sieve X where
  arrows Y f := forall Z (h : Z ‚ü∂ Y), S (h ‚â´ f) ‚Üí R (h ‚â´ f)
  downward_closed := by
    intros Y Z f h g Z' g'
    rw [<- Category.assoc]
    exact (h _ _)

end Sieve


namespace SubobjectClassifier
  variable {C : Type} [Category C]

  @[simp]
  def prop : Psh C where
    obj X := Sieve X.unop
    map h x := x.pullback h.unop
    map_id := by
      intro
      simp only [unop_id, Sieve.pullback_id]
      rfl
    map_comp := by
      intros
      simp only [unop_comp, Sieve.pullback_comp]
      rfl

  def entail : prop (C:=C) ‚äó prop ‚ü∂ prop where
    app X := fun p => (Sieve.entails p.1 p.2 : Sieve X.unop)
    naturality X Y f := by
      ext p
      apply Sieve.arrows_ext
      funext Z g
      ext
      constructor <;> intros h Z' g'
      ¬∑ rw [<- Category.assoc]
        apply h Z' g'
      ¬∑ have := h Z' g'
        rw [<-Category.assoc] at this
        exact this

  abbrev top‚ÇÄ : ùüô_ (Psh C) ‚ü∂ prop where
    app X := fun _ => (‚ä§ : Sieve X.unop)
    naturality X Y f := by
      funext
      simp only [prop, types_comp_apply, Sieve.pullback_top]

  abbrev bot‚ÇÄ : ùüô_ (Psh C) ‚ü∂ prop where
    app X := fun _ => (‚ä• : Sieve X.unop)
    naturality X Y f := by
      funext
      simp only [prop, types_comp_apply, Sieve.ext_iff, Sieve.pullback_apply]
      intros
      constructor <;> exact False.elim

  def conj : prop (C:=C) ‚äó prop  ‚ü∂ prop where
    app X := fun p => (p.1 ‚äì p.2: Sieve X.unop)

  def disj : prop (C:=C) ‚äó prop ‚ü∂ prop where
    app X := fun p => (p.1 ‚äî p.2 : Sieve X.unop)

  def eq {A : Psh C} : A ‚äó A ‚ü∂ prop where
    app X := fun as =>
      {
        arrows :=  fun Y f => A.map f.op as.1 = A.map f.op as.2
        downward_closed := by
          intros _ _ _ eq _
          simp only [Opposite.op_unop, op_comp, FunctorToTypes.map_comp_apply, eq]
      }
    naturality X Y f := by
      funext as
      simp only [prop, Opposite.op_unop, types_comp_apply, Sieve.ext_iff, Sieve.pullback_apply,
        op_comp, Quiver.Hom.op_unop, FunctorToTypes.map_comp_apply]
      intros Z g
      constructor <;> exact id


  theorem eq_app {A : Psh C} (c:C·µí·µñ ) (a: (A ‚äó A).obj c) (c': C) (f:c'‚ü∂ c.unop):
   (SubobjectClassifier.eq.app c a).arrows f ‚Üî A.map f.op a.1 = A.map f.op a.2 := by
    rfl

  -- p^* : (B ‚ü∂ prop) -> (A ‚ü∂ prop)
  abbrev precomp {A B : Psh C} (p : A ‚ü∂ B) (œà : B ‚ü∂ prop) : A ‚ü∂ prop := p ‚â´ œà

  def existQ {A B : Psh C} (p : A ‚ü∂ B) (œÜ : A ‚ü∂ prop) : B ‚ü∂ prop where
    app X := fun b =>
      {
        arrows := fun Y f => exists a, p.app (Opposite.op Y) a = B.map f.op b ‚àß (œÜ.app _ a).arrows (ùüô Y)
        downward_closed := by
          intro Y Z f ‚ü®a, ‚ü®eq, h‚ü©‚ü© g
          let a' := A.map g.op a
          exists a'
          constructor
          ¬∑ calc p.app (Opposite.op Z) a' = (A.map g.op ‚â´ p.app _) a := rfl
            _ = (p.app _ ‚â´ B.map g.op) a := by rw [p.naturality g.op]
            _ = B.map (g ‚â´ f).op b := by simp only [types_comp_apply, eq, Opposite.op_unop,
              op_comp, FunctorToTypes.map_comp_apply]
          ¬∑ have eq : œÜ.app _ a' = prop.map g.op (œÜ.app _ a) := by
              calc œÜ.app _ a' = (A.map g.op ‚â´ œÜ.app _) a := rfl
              _ = (œÜ.app _ ‚â´ prop.map g.op) a := by rw [œÜ.naturality g.op]
              _ = prop.map g.op (œÜ.app _ a) := rfl
            simp only [prop, eq, Quiver.Hom.unop_op, Sieve.pullback_apply, Category.id_comp]
            have := (œÜ.app _ a).downward_closed h g
            simp only [prop, Category.comp_id] at this
            exact this
      }


  theorem existQ_app_arrows {A B : Psh C} (p : A ‚ü∂ B) (œÜ : A ‚ü∂ prop) (X: C·µí·µñ) (b: B.obj X) (Y: C) (f: Y ‚ü∂ Opposite.unop X):
    ((existQ p œÜ).app X b).arrows  f = exists a, p.app (Opposite.op Y) a = B.map f.op b ‚àß (œÜ.app _ a).arrows (ùüô Y) := rfl


  noncomputable
  def existœÄ {A B : Psh C} (œÜ : A ‚äó B ‚ü∂ prop) : B ‚ü∂ prop := existQ (snd A B) œÜ

  abbrev sSup‚ÇÄ {X : Psh C} (P : Set (X ‚ü∂ prop)) : X ‚ü∂ prop where
    app Œì x := (‚®Ü p ‚àà P, p.app Œì x : Sieve Œì.unop)
      -- let P' : Set (Sieve Œì.unop) := { (p.app Œì x : Sieve Œì.unop) | (p : X ‚ü∂ prop) (_h : P p) }
      -- (SupSet.sSup P' : Sieve Œì.unop)
    naturality := by
      intros Œì Œî g
      funext x
      rw [Sieve.ext_iff]
      intros Œû f ; constructor <;> simp [iSup]
      ¬∑ intros p hp hf
        exists p ; constructor ; assumption
        rw [<-types_comp_apply (X.map g) (p.app Œî), p.naturality g] at hf
        simp only [types_comp_apply, Sieve.pullback_apply] at hf
        exact hf
      ¬∑ intros p hp hf
        exists p ; constructor ; assumption
        rw [<-types_comp_apply (X.map g) (p.app Œî), p.naturality g]
        simp only [types_comp_apply, Sieve.pullback_apply]
        exact hf

  abbrev sInf‚ÇÄ {X : Psh C} (P : Set (X ‚ü∂ prop)) : X ‚ü∂ prop where
    app Œì x :=
      let P' : Set (Sieve Œì.unop) := { (p.app Œì x : Sieve Œì.unop) | (p : X ‚ü∂ prop) (_h : P p) }
      (InfSet.sInf P' : Sieve Œì.unop)
    naturality := by
      intros Œì Œî g
      funext x
      rw [Sieve.ext_iff]
      intros Œû f ; constructor
      ¬∑ simp only [prop, exists_prop, types_comp_apply, Sieve.sInf_apply, Set.mem_setOf_eq,
        forall_exists_index, and_imp, forall_apply_eq_imp_iff‚ÇÇ, Sieve.pullback_apply] ; intros hf p hp
        have := hf p hp
        rw [<-types_comp_apply (X.map g) (p.app Œî), p.naturality g] at this
        simp only [types_comp_apply, Sieve.pullback_apply] at this
        exact this
      ¬∑ simp only [prop, exists_prop, types_comp_apply, Sieve.pullback_apply, Sieve.sInf_apply,
        Set.mem_setOf_eq, forall_exists_index, and_imp, forall_apply_eq_imp_iff‚ÇÇ] ; intros hf p hp
        rw [<-types_comp_apply (X.map g) (p.app Œî), p.naturality g]
        simp only [types_comp_apply, Sieve.pullback_apply]
        exact hf _ hp

  section

  variable {X : Psh C}

  instance: LE (X ‚ü∂ prop) where
    le f g := forall Œì (x : X.obj Œì),
      let lhs : Sieve Œì.unop := f.app Œì x
      lhs ‚â§ (g.app Œì x : Sieve Œì.unop)

  instance: Top (X ‚ü∂ prop) where
    top := toUnit _ ‚â´ top‚ÇÄ

  instance: Bot (X ‚ü∂ prop) where
    bot := toUnit _ ‚â´ bot‚ÇÄ

  instance: PartialOrder (X ‚ü∂ prop) where
    le_refl := by intros f Œì x ; apply le_refl
    le_trans := by
      intros f g h fg gh Œì x ;
     -- exact le_trans (gh _ _) (fg _ _)
      eapply le_trans
      ¬∑ exact fg _ _
      ¬∑ exact gh _ _
    le_antisymm := by
      intros f g fg gf ; ext Œì x ; simp only [prop] ; apply le_antisymm <;> simp_all [LE.le, prop]

  instance: SemilatticeSup (X ‚ü∂ prop) where
    sup œÜ œà := lift œÜ œà ‚â´ disj
    le_sup_left := by simp [LE.le]; intros ; simp [disj] ; left; assumption
    le_sup_right := by simp [LE.le]; intros ; simp [disj] ; right; assumption
    sup_le := by
      intros _ _ _ h1 h2 c x
      simp only [prop, disj, FunctorToTypes.comp, lift_app_pt, sup_le_iff,
        h1 c x, h2 c x, and_self]

  -- set_option trace.profiler true in
  noncomputable
  instance: SemilatticeInf (X ‚ü∂ prop) where
    inf œÜ œà := lift œÜ œà ‚â´ conj
    inf_le_left := by simp only [prop, LE.le, lift, conj, Functor.Monoidal.tensorObj_obj,
      FunctorToTypes.comp, Sieve.inter_apply, and_imp] ; intros ; assumption
    inf_le_right := by simp [LE.le, conj]
    le_inf := by
      intros _ _ _ h1 h2 c x
      simp[conj, h1 c x, h2 c x]

  instance: SupSet (X ‚ü∂ prop) where
    sSup := sSup‚ÇÄ -- Not sure whether this is good practice to have a name in the middle

  instance: InfSet (X ‚ü∂ prop) where
    sInf := sInf‚ÇÄ

  instance: CompleteSemilatticeSup (X ‚ü∂ prop) where
    le_sSup := by
      intros s a h
      simp only[sSup]
      intros c x
      apply le_biSup (Œ±:=Sieve c.unop) (fun p => p.app c x) h
    sSup_le := by
      intros s a h
      simp only[sSup]
      intros c x
      simp [iSup_le_iff]
      intros i hi
      apply (h i hi c x)

  instance: CompleteSemilatticeInf (X ‚ü∂ prop) where
    le_sInf := by
      intros s a h
      simp only[sInf]
      intros c x
      apply @le_sInf (Sieve (c.unop)) _ _ (a.app c x)
      simp; intros ; apply h ; assumption
    sInf_le := by
      intros s a h
      intros c x
      apply @sInf_le (Sieve (c.unop)) _ _ (a.app c x)
      simp
      exists a

    -- set_option trace.profiler true in
    noncomputable
    instance complete_lattice_to_prop {X : Psh C} : CompleteLattice (X ‚ü∂ prop) where
      le_top := by simp only [prop, LE.le, Top.top, FunctorToTypes.comp]; intros; constructor
      bot_le := by simp only [prop, LE.le, Bot.bot, FunctorToTypes.comp]; rintro x c xc c' f ‚ü®‚ü©
  end


  --sup œÜ œà := ChosenFiniteProducts.lift œÜ œà ‚â´ disj
  theorem psh_top {X: Psh C} :  ‚ä§ = toUnit X ‚â´ top‚ÇÄ := rfl

  theorem top_app {X : Psh C} (c: C·µí·µñ) (x: X.obj c) (c' : C) (f : c' ‚ü∂ c.unop)
    : ((‚ä§ : X ‚ü∂ prop).app c x).arrows f := by
    simp only [Top.top, FunctorToTypes.comp, top‚ÇÄ]; constructor



  theorem psh_bot {X: Psh C} :  ‚ä• = toUnit X ‚â´ bot‚ÇÄ  := rfl

  theorem psh_sup {X: Psh C} (œÜ œà: X ‚ü∂ SubobjectClassifier.prop) : œÜ ‚äî œà = lift œÜ œà ‚â´ SubobjectClassifier.disj := rfl

  theorem psh_sup_arrows {X: Psh C} (œÜ œà: X ‚ü∂ SubobjectClassifier.prop) (c: C·µí·µñ) (x: X.obj c):
   ((œÜ ‚äî œà).app c x) = ((lift œÜ œà ‚â´ SubobjectClassifier.disj).app c x):= rfl

  --theorem disj_lift
  theorem psh_sup_arrows' {X: Psh C} (œÜ œà: X ‚ü∂ SubobjectClassifier.prop) (c: C·µí·µñ) (x: X.obj c):
    let s1 : Sieve c.unop := œÜ.app c x
    let s2 : Sieve c.unop := œà.app c x
    ((œÜ ‚äî œà).app c x) = s1 ‚äî s2 := rfl

  theorem psh_inf {X: Psh C} (œÜ œà: X ‚ü∂ SubobjectClassifier.prop) : œÜ ‚äì œà = lift œÜ œà ‚â´ SubobjectClassifier.conj := rfl

  theorem psh_inf_arrows' {X: Psh C} (œÜ œà: X ‚ü∂ SubobjectClassifier.prop) (c: C·µí·µñ) (x: X.obj c):
    let s1 : Sieve c.unop := œÜ.app c x
    let s2 : Sieve c.unop := œà.app c x
    ((œÜ ‚äì œà).app c x) = s1 ‚äì s2 := rfl

  theorem psh_sSup_arrows {X : Psh C} (s : Set (X ‚ü∂ prop)) (c : C·µí·µñ) (x : X.obj c) :
    (sSup s).app c x = (‚®Ü œÜ ‚àà s, œÜ.app c x : Sieve c.unop) := rfl

  theorem psh_iSup_arrows {X : Psh C} (œÜ : I ‚Üí (X ‚ü∂ prop)) (c : C·µí·µñ) (x : X.obj c) :
    (‚®Ü i, œÜ i).app c x = (‚®Ü i, (œÜ i).app c x : Sieve c.unop) := by
    calc
      (‚®Ü i, œÜ i).app c x = (sSup (Set.range œÜ)).app c x := by simp [iSup]
      _ = (‚®Ü œà ‚àà (Set.range œÜ), œà.app c x : Sieve c.unop) := by simp [psh_sSup_arrows _ c x]
      _ = (‚®Ü i, (œÜ i).app c x : Sieve c.unop) := by rw [iSup_range (Œ±:=Sieve c.unop) (g:=fun œà => œà.app c x) (f:=œÜ)]


  theorem to_prop_top {X: Psh C} (f: X‚ü∂ SubobjectClassifier.prop): f = ‚ä§ ‚Üî
   ‚àÄ(c: C·µí·µñ ) (x: X.obj c), f.app c x = (‚ä§ : Sieve c.unop) := by
     simp only[psh_top]
     constructor
     ¬∑ intro h
       simp[h]
     ¬∑ intro h
       ext c x
       simp[h, Top.top]


  theorem Sieve_eq {c: C} (s1 s2: Sieve c): s1 = s2 ‚Üî s1.arrows = s2.arrows := by
    constructor
    ¬∑ intros a ; simp[a]
    ¬∑ intros a; ext ; simp[a]

  theorem Sieve_eq' {c: C} (s1 s2: Sieve c): s1 = s2 ‚Üî
  ‚àÄ(c': C) (f:c'‚ü∂ c), s1.arrows f = s2.arrows f := by
    simp[Sieve_eq]
    constructor
    ¬∑ intros a ; simp[a]
    ¬∑ intros a; funext; simp[a]

  theorem lift_eq_eq {X A : Psh C} (t1 t2:X ‚ü∂ A) (c: C·µí·µñ) (x: X.obj c):
    (lift t1 t2 ‚â´ eq).app c x = (‚ä§ : Sieve c.unop) ‚Üî t1.app c x= t2.app c x := by
     simp[Sieve_eq',eq_app]
     constructor
     ¬∑ intro h ; let h1:= h c.unop (ùüô c.unop);simp at h1; assumption
     ¬∑ intro h ; simp[h]


  theorem Psh_hom_eq {X Y: Psh C} (f g: X‚ü∂ Y) : f = g ‚Üî
   ‚àÄ(c: C·µí·µñ )(x: X.obj c), f.app c x = g.app c x := by
    constructor
    ¬∑ intro h; simp[h]
    ¬∑ intro h; ext c x; simp[h]


  theorem lift_eq_eq' {X A : Psh C} (t1 t2:X ‚ü∂ A):
    (lift t1 t2 ‚â´ eq) = ‚ä§ ‚Üî t1 = t2:= by
     simp only[to_prop_top]
     simp only[Psh_hom_eq]
     simp only[lift_eq_eq]

  theorem sieve_distr {c: C} (s1 s2 s3: Sieve c) : s1 ‚äì (s2 ‚äî s3) = (s1 ‚äì s2) ‚äî (s1 ‚äì s3) := by
   apply le_antisymm
   ¬∑ intros c' f
     simp
     intros h1 h2
     cases h2
     ¬∑ left; constructor; assumption ; assumption
     ¬∑ right; constructor; assumption ; assumption
   intros c' f
   simp
   rintro (‚ü®_,_‚ü© | ‚ü®_, _‚ü©)
   ¬∑ constructor ; assumption ; left ; assumption
   ¬∑ constructor; assumption; right; assumption


  theorem psh_distr {X: Psh C} (a b c: X ‚ü∂ SubobjectClassifier.prop) : a ‚äì (b ‚äî c) = (a ‚äì b) ‚äî (a ‚äì c) := by
   ext c0 x
   simp only[psh_inf_arrows',psh_sup_arrows',sieve_distr]

  theorem sieve_inf_sSup_distr (X : C) :
    ‚àÄ (a : Sieve X) (s : I ‚Üí Sieve X), a ‚äì (‚®Ü i, s i) ‚â§ ‚®Ü i, a ‚äì s i := by
    intros a b X' f
    simp [iSup]

  -- theorem sieve_inf_sSup_distr (X : C) :
  --   ‚àÄ (a : Sieve X) (s : Set (Sieve X)), a ‚äì SupSet.sSup s ‚â§ ‚®Ü b ‚àà s, a ‚äì b := by
  --   intros a b X' f
  --   simp
  --   intros ha c hcb hc
  --   simp [iSup]
  --   exists c, (a ‚äì c)

  theorem psh_inf_sSup_distr {X : Psh C} (a : X ‚ü∂ prop) (b : I ‚Üí (X ‚ü∂ prop)) :
    a ‚äì (‚®Ü i, b i) ‚â§ ‚®Ü i, a ‚äì b i := by
    intros c x
    simp [psh_inf_arrows' a, psh_iSup_arrows _ c x, sieve_inf_sSup_distr]

  theorem complete_lattice_to_prop_top (X:Psh C) : (@SubobjectClassifier.complete_lattice_to_prop C _ X).top =
    toUnit _ ‚â´ top‚ÇÄ := rfl

  theorem complete_lattice_to_prop_inf (X:Psh C) (œÜ œà: X ‚ü∂ prop): (@SubobjectClassifier.complete_lattice_to_prop C _ X).inf œÜ œà  =
    lift œÜ œà ‚â´ conj := rfl

  theorem complete_lattice_to_prop_sup (X:Psh C) (œÜ œà: X ‚ü∂ prop): (@SubobjectClassifier.complete_lattice_to_prop C _ X).sup œÜ œà  =
    lift œÜ œà ‚â´ disj := rfl

  theorem to_prop_naturality {X: Psh C}(œÜ :X ‚ü∂ prop) (c: C·µí·µñ) (x: X.obj c) {c': C} (f: c' ‚ü∂ c.unop):
   œÜ.app (Opposite.op c') (X.map (Opposite.op f) x) =
   CategoryTheory.Sieve.pullback f (œÜ.app c x) := by
   have := œÜ.naturality (Opposite.op f)
   have l : œÜ.app (Opposite.op c') (X.map (Opposite.op f) x) =
           (X.map (Opposite.op f) ‚â´ œÜ.app (Opposite.op c')) x := by
    simp
   have r : Sieve.pullback f (œÜ.app c x) =
            (œÜ.app c ‚â´ prop.map (Opposite.op f)) x := by
    simp
   simp only[l,r]
   simp only[this]


  theorem Sieve_le_alt1 {X: Psh C}(f g:X ‚ü∂ prop)
   (h:‚àÄ (c: C·µí·µñ) (x: X.obj c),
    let s1 : Sieve c.unop := (f.app c x)
    let s2 : Sieve c.unop := (g.app c x)
    s1 = ‚ä§ ‚Üí s2 = ‚ä§): f ‚â§ g:= by
    intros cop x lhs c' f1 asm
    simp[lhs] at asm
    have a : CategoryTheory.Sieve.pullback f1 lhs = ‚ä§ := by
     simp[‚Üê CategoryTheory.Sieve.id_mem_iff_eq_top]
     simp[lhs]
     assumption
    let sf : Sieve c':= f.app (Opposite.op c') (X.map (Opposite.op f1) x)
    have a': sf = ‚ä§ := by
     simp[sf]
     have : CategoryTheory.Sieve.pullback f1 (f.app cop x) = ‚ä§ := by
      simp[‚Üê CategoryTheory.Sieve.id_mem_iff_eq_top]
      assumption
     simp[‚Üê to_prop_naturality] at this
     assumption
    let sg : Sieve c':= g.app (Opposite.op c') (X.map (Opposite.op f1) x)
    have a'': sg = ‚ä§ := by
     apply h
     simp[sf] at a'
     assumption
    simp[sg] at a''
    have a''': CategoryTheory.Sieve.pullback f1 (g.app cop x) = ‚ä§ := by
     simp[‚Üê to_prop_naturality] --prove the next step as simpler form
     assumption
    ---simp only[@to_prop_naturality _ _ _ f1] at a'' why???
    simp[‚Üê CategoryTheory.Sieve.id_mem_iff_eq_top] at a'''
    assumption

  theorem Sieve_le_alt2 {X: Psh C}(f g:X ‚ü∂ prop) (h: f ‚â§ g):
   (‚àÄ (c: C·µí·µñ) (x: X.obj c),
    let s1 : Sieve c.unop := (f.app c x)
    let s2 : Sieve c.unop := (g.app c x)
    s1 = ‚ä§ ‚Üí s2 = ‚ä§):= by
   simp [‚Üê CategoryTheory.Sieve.id_mem_iff_eq_top]
   intros
   apply h
   assumption

  theorem Sieve_le_alt {X: Psh C}(f g:X ‚ü∂ prop):  f ‚â§ g ‚Üî ‚àÄ (c: C·µí·µñ) (x: X.obj c),
    let s1 : Sieve c.unop := (f.app c x)
    let s2 : Sieve c.unop := (g.app c x)
    s1 = ‚ä§ ‚Üí s2 = ‚ä§ := by
    constructor
    ¬∑ apply Sieve_le_alt2
    ¬∑ apply Sieve_le_alt1

  abbrev le_to_prop_id {X: Psh C}(f g:X ‚ü∂ prop) :=
    ‚àÄ (c: C·µí·µñ) (x: X.obj c), (f.app c x).arrows (ùüô c.unop) ‚Üí (g.app c x).arrows (ùüô c.unop)

  theorem le_to_prop_le_to_prop_id {X: Psh C}(f g:X ‚ü∂ prop) :
    f ‚â§ g ‚Üî le_to_prop_id f g := by
    simp [le_to_prop_id, CategoryTheory.Sieve.id_mem_iff_eq_top]
    apply Sieve_le_alt


  def existQ_precomp_adj {A B : Psh C} (p : A ‚ü∂ B) :
    GaloisConnection (existQ p) (precomp p) := by
    simp only[GaloisConnection, le_to_prop_le_to_prop_id]
    intros œÜ œà
    constructor
    ¬∑ intros l _ x _
      apply l
      exists x
      simp
      assumption
    ¬∑ rintro l _ _ ‚ü® _, ‚ü®h1, _‚ü©‚ü©
      simp at h1
      subst h1
      apply l
      assumption


  def mate {B B' A A' : Psh C} (g : A ‚ü∂ B) (g' : A' ‚ü∂ B') (m : A' ‚ü∂ A) (k : B' ‚ü∂ B)
    (h : m ‚â´ g = g' ‚â´ k) (œÜ : B' ‚ü∂ prop) : existQ m (precomp g' œÜ) ‚â§ precomp g (existQ k œÜ) := by
    calc existQ m (precomp g' œÜ) ‚â§  existQ m (precomp g' (precomp k (existQ k œÜ))) := by
          apply GaloisConnection.monotone_l (existQ_precomp_adj _)
          apply GaloisConnection.monotone_u (existQ_precomp_adj _)
          apply GaloisConnection.le_u_l (existQ_precomp_adj _)
      _ ‚â§ existQ m (precomp (g' ‚â´ k) (existQ k œÜ)) := by
        apply le_refl
      _ ‚â§ existQ m (precomp (m ‚â´ g) (existQ k œÜ)) := by
        rw [h]
      _ ‚â§ existQ m (precomp m (precomp g (existQ k œÜ))) := by
        apply le_refl
      _ ‚â§ precomp g (existQ k œÜ) := by
        apply GaloisConnection.l_u_le (existQ_precomp_adj _)

  theorem le_precomp {X Y : Psh C} (œÜ : Y ‚ü∂ X) (f g : X ‚ü∂ prop) :
    f ‚â§ g -> œÜ ‚â´ f ‚â§ œÜ ‚â´ g := by
    intros fg Œì x
    apply fg

  theorem le_iso {X Y : Psh C} (œÜ : X ‚âÖ Y) (f g : X ‚ü∂ prop) :
    f ‚â§ g -> œÜ.inv ‚â´ f ‚â§ œÜ.inv ‚â´ g := by
    apply le_precomp

  theorem iso_hom_precomp_monotone {X Y : Psh C} (œÜ : X ‚âÖ Y) : Monotone (precomp œÜ.hom) := by
    apply le_precomp

  theorem iso_inv_precomp_monotone {X Y : Psh C} (œÜ : X ‚âÖ Y) : Monotone (precomp œÜ.inv) := by
    apply le_iso

  open OrderIso in
  def precomp_order_iso {X Y : Psh C} (œÜ : X ‚âÖ Y) : (Y ‚ü∂ prop) ‚âÉo (X ‚ü∂ prop) :=
    let f : (X ‚ü∂ prop) ‚Üío (Y ‚ü∂ prop) := ‚ü®precomp œÜ.inv, iso_inv_precomp_monotone œÜ‚ü©
    let g : (Y ‚ü∂ prop) ‚Üío (X ‚ü∂ prop) := ‚ü®precomp œÜ.hom, iso_hom_precomp_monotone œÜ‚ü©
    OrderIso.ofHomInv g f (by ext ; simp [f, g]) (by ext ; simp [f, g])

  theorem precomp_order_iso_app {X Y : Psh C} (œÜ : X ‚âÖ Y) (f : Y ‚ü∂ prop):
    (precomp_order_iso œÜ) f = œÜ.hom ‚â´ f := by rfl

  theorem precomp_order_iso_toFun {X Y : Psh C} (œÜ : X ‚âÖ Y) (f : Y ‚ü∂ prop):
    (precomp_order_iso œÜ).toFun f = œÜ.hom ‚â´ f := by rfl

  theorem precomp_order_iso_invFun {X Y : Psh C} (œÜ : X ‚âÖ Y) (f : X ‚ü∂ prop):
    (precomp_order_iso œÜ).invFun f = œÜ.inv ‚â´ f := by rfl

  def Sieve.ext' (c : C·µí·µñ) {R S : Sieve c.unop} (h : ‚àÄ ‚¶Éc'‚¶Ñ (f : c ‚ü∂ c'), R f.unop ‚Üî S f.unop) : R = S := by
    apply Sieve.ext
    intros Y f
    apply h ‚ü®f‚ü©

  /- another simple instance of Beck-Chevalley done by hand
    (applied to the pullback-square corresponding to the cospan Œ∏ : B' -> B <- A : p) -/
  theorem precomp_existQ_iso {A B B' : Psh C} (p : A ‚ü∂ B) (Œ∏ : B' ‚âÖ B) (œÜ : A ‚ü∂ prop) :
    Œ∏.hom ‚â´ existQ p œÜ = existQ (p ‚â´ Œ∏.inv) œÜ := by
    ext c b'
    apply Sieve.ext' ; intros Y f
    simp [existQ]
    have := congrFun (Œ∏.hom.naturality f) b'
    simp only [types_comp_apply] at this
    rw [<-this]
    constructor
    ¬∑ rintro ‚ü®a, ‚ü®eq,_‚ü©‚ü©
      exists a
      constructor
      ¬∑ rw [eq, <-Iso.app_hom, <-Iso.app_inv]
        simp?
      ¬∑ assumption
    ¬∑ rintro ‚ü®a, ‚ü®eq,_‚ü©‚ü©
      exists a
      constructor
      ¬∑ rw [<-eq, <-Iso.app_hom, <-Iso.app_inv]
        simp?
      ¬∑ assumption

  theorem existQ_iso {A A' B : Psh C} (p : A' ‚ü∂ B) (Œ∏ : A' ‚âÖ A) (œÜ : A ‚ü∂ prop) :
    existQ (Œ∏.inv ‚â´ p) œÜ = existQ p (Œ∏.hom ‚â´ œÜ) := by
    ext c b
    apply Sieve.ext' ; intros Y f
    simp [existQ]
    constructor
    ¬∑ rintro ‚ü®a, ‚ü®eq,_‚ü©‚ü©
      exists (Œ∏.inv.app Y a)
      constructor; assumption
      simp? ; assumption
    ¬∑ rintro ‚ü®a, ‚ü®eq,_‚ü©‚ü©
      exists (Œ∏.hom.app Y a)
      constructor; simp? ; assumption
      assumption


  theorem precomp_existsœÄ_iso {A B B' : Psh C} (Œ∏ : B' ‚âÖ B) (œÜ : A ‚äó B ‚ü∂ prop) :
    Œ∏.hom ‚â´ existœÄ œÜ = existœÄ (A ‚óÅ Œ∏.hom ‚â´ œÜ) := by
    rw [existœÄ, precomp_existQ_iso]
    have : snd A B ‚â´ Œ∏.inv = A ‚óÅ Œ∏.inv ‚â´ snd A B' :=  by simp
    let Œ∏' : A ‚äó B' ‚âÖ A ‚äó B := ‚ü®A ‚óÅ Œ∏.hom, A ‚óÅ Œ∏.inv, by simp , by simp‚ü©
    simp only [existœÄ, this]
    rw [existQ_iso _ Œ∏']

  def forallQ {A B : Psh C} (p : A ‚ü∂ B) (œÜ : A ‚ü∂ prop) : B ‚ü∂ prop where
    app c b := {
      arrows Y f := forall (Z : C) (g : Z ‚ü∂ Y) (a : A.obj (Opposite.op Z)),
        p.app _ a = B.map (f.op ‚â´ g.op) b -> (œÜ.app _ a).arrows (ùüô _)
      downward_closed := by
        intros Y' Y f h fY Z g a eq
        apply h Z (g ‚â´ fY) a
        simp [eq]
    }

  def precomp_forallQ_adj {A B : Psh C} (p : A ‚ü∂ B) :
    GaloisConnection (precomp p) (forallQ p) := by
    simp only[GaloisConnection, le_to_prop_le_to_prop_id]
    intros œÜ œà
    constructor
    ¬∑ intros l _ x h Z g a eq
      apply l
      simp [precomp, eq]
      have := congrFun (œÜ.naturality g.op) x
      simp at this
      simp [this]
      have := (œÜ.app _ x).downward_closed h g
      simp at this
      assumption
    ¬∑ intros l _ x h
      apply l _ (p.app _ x) h _ (ùüô _)
      simp

noncomputable
  local instance precomp_sSupHom {A B : Psh C} (p : A ‚ü∂ B) : sSupHom (B ‚ü∂ prop) (A ‚ü∂ prop) :=
    GaloisConnection.sSupHomLeft (precomp_forallQ_adj p)

  def precomp_iSup {A B : Psh C} (p : A ‚ü∂ B) {I} (f : I -> (B ‚ü∂ prop)) :
    p ‚â´ (‚®Ü i, f i) = ‚®Ü i, p ‚â´ (f i) := by
    calc p ‚â´ ‚®Ü i, f i = (precomp_sSupHom p) (‚®Ü i, f i) := by rfl
                    _ = ‚®Ü i, (precomp_sSupHom p) (f i) := by
                          apply map_iSup (precomp_sSupHom p) f
                    _  = ‚®Ü i, p ‚â´ f i  := by rfl

  theorem lift_same_eq (X Y: Psh C) (f: X ‚ü∂ Y): lift f f ‚â´ eq = ‚ä§ := by
    rw [lift_eq_eq']


end SubobjectClassifier


namespace SubobjectClassifier.BaseChange
  variable {C D : Type} [Category C] [Category D] (F : Functor C D)
  open Functor


    def pb_prop : F.op ‚ãô SubobjectClassifier.prop (C:=D) ‚ü∂ SubobjectClassifier.prop where
      app := fun c x =>
        let x'' : Sieve (F.obj c.unop) := x
        (Sieve.functorPullback F x'' : Sieve _)

    theorem pb_prop_le {X : Psh D} (œÜ œà : X ‚ü∂ SubobjectClassifier.prop) :
      œÜ ‚â§ œà ‚Üí (whiskerLeft F.op œÜ ‚â´ pb_prop F) ‚â§ (whiskerLeft F.op œà ‚â´ pb_prop F) := by
      intros h Œû x lhs Œî f
      apply h _ x (F.map f)

    @[simp]
    def map_pred {X : Psh D} (œÜ : X ‚ü∂ SubobjectClassifier.prop) :
      (F.op ‚ãô X) ‚ü∂ SubobjectClassifier.prop :=
        whiskerLeft F.op œÜ ‚â´ pb_prop F

    theorem map_pred_comp {X Y: Psh D} (f : X ‚ü∂ Y) (œÜ : Y ‚ü∂ SubobjectClassifier.prop) :
      map_pred F (f ‚â´ œÜ) = whiskerLeft F.op f ‚â´ map_pred F œÜ := by
      simp only [map_pred, Functor.whiskerLeft_comp]
      rfl

    def map_pred_mon {X : Psh D} : (X ‚ü∂ SubobjectClassifier.prop) ‚Üío ((F.op ‚ãô X) ‚ü∂ SubobjectClassifier.prop) where
      toFun œÜ := map_pred F œÜ
      monotone' x y := by apply pb_prop_le

    def pb_prop_top {X : Psh D} : map_pred (X:=X) F ‚ä§ = ‚ä§ := by
      ext x
      rfl

    def pb_prop_bot {X : Psh D} : map_pred (X:=X) F ‚ä• = ‚ä• := by
      ext x
      rfl

    def pb_prop_conj : map_pred F (œÜ ‚äì œà) = map_pred F œÜ ‚äì map_pred F œà := by
      ext x
      rfl

    def pb_prop_disj : map_pred F (œÜ ‚äî œà) = map_pred F œÜ ‚äî map_pred F œà := by
      ext x
      rfl

    def pb_prop_eq (X : Psh D) :
      map_pred F (SubobjectClassifier.eq (A:=X)) = (SubobjectClassifier.eq (A:=F.op ‚ãô X)) := by
        ext x ‚ü®a1 , a2‚ü©
        apply CategoryTheory.Sieve.arrows_ext
        simp [pb_prop, SubobjectClassifier.eq]
        funext c0 f
        simp[Presieve.functorPullback]

    theorem pb_prop_existQ {A B : Psh D} (p: A‚ü∂ B) (œÜ: A ‚ü∂ SubobjectClassifier.prop):
      map_pred F (SubobjectClassifier.existQ p œÜ) =
      SubobjectClassifier.existQ (whiskerLeft F.op p) (map_pred F œÜ) := by
        ext c a
        simp
        ext Y f
        simp[SubobjectClassifier.existQ_app_arrows]
        simp[pb_prop]
        simp[SubobjectClassifier.existQ_app_arrows]

    theorem pb_prop_existœÄ {A B : Psh D} (œÜ: A ‚äó B ‚ü∂ SubobjectClassifier.prop):
      map_pred F (SubobjectClassifier.existœÄ œÜ) =
      SubobjectClassifier.existœÄ ((BaseChange.pb_prod_pair_iso F A B).inv ‚â´ map_pred F œÜ) := by
        rw [SubobjectClassifier.existœÄ, pb_prop_existQ]
        rfl

    open SubobjectClassifier in
    theorem pb_prop_iSup {X : Psh D} {I} (f : I -> (X ‚ü∂ SubobjectClassifier.prop)) :
      map_pred F (‚®Ü i : I, f i) = ‚®Ü i : I, (map_pred F (f i)) := by
      ext c x
      set d := Opposite.op (F.obj c.unop)
      simp [SubobjectClassifier.psh_iSup_arrows _ _ x]
      rw [SubobjectClassifier.psh_iSup_arrows f d x]
      simp [pb_prop]
      apply Sieve.ext ; intros c' g ; simp; constructor
      ¬∑ rintro ‚ü®i, ‚ü®‚ü®i0, hi‚ü©, hg‚ü©‚ü©
        exists (Sieve.functorPullback F i) ; simp ; constructor <;> try assumption
        exists i0 ; simp at hi ; rw [<-hi]
      ¬∑ rintro ‚ü®i, ‚ü®‚ü®i0, hi‚ü©, hg‚ü©‚ü©
        simp [iSup]
        simp at hi ; rw [<-hi] at hg
        exists i0

end SubobjectClassifier.BaseChange
